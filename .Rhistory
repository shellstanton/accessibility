lcm_pop_data_rcl_stars_sf_polygon <- st_cast(lcm_pop_data_rcl_stars_sf, "POLYGON")
lcm_pop_data_rcl_stars_sf_polygon
lcm_pop_data_rcl_stars_sf_polygon_dissolve_test <- ms_dissolve(lcm_pop_data_rcl_stars_sf_polygon, copy_fields = "mins")
lcm_pop_data_rcl_stars_sf_polygon_dissolve_test
lcm_pop_data_rcl_stars_sf_polygon_dissolve_test
_pop_data_rcl_stars_sf_polygon_dissolve_test
knitr::opts_chunk$set(echo = TRUE)
lcm_pop_data_rcl
knitr::opts_chunk$set(echo = TRUE)
## load required packages, and install packages which are potentially missing on client computers
list.of.packages <- c("sf", "mapview", "googledrive", "osmdata", "ggplot2", "raster", "gdistance", "fasterize", "remotes", "rgdal", "stars", "geojsonio")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE)
library(rgee)
ee_Initialize(drive = TRUE)
## max and minimum values for longitude and latitude
bbxmin <- 33.2
bbxmax <- 33.8
bbymin <- -11.29
bbymax <- -10.73
aoi <- ee$Geometry$Polygon(coords=list(c(bbxmin, bbymax), c(bbxmax, bbymax), c(bbxmax, bbymin), c(bbxmin, bbymin)))
ls8 <- ee$ImageCollection("LANDSAT/LC08/C01/T1_RT_TOA")
spatialFiltered <- ls8$filterBounds(aoi)
temporalFiltered <- spatialFiltered$filterDate('2018-06-01', '2018-09-30')
ndvilowcloud <- function(image) {
# Get a cloud score in [0, 100].
cloud <- ee$Algorithms$Landsat$simpleCloudScore(image)$select('cloud')
# Create a mask of cloudy pixels from an arbitrary threshold (20%).
mask <- cloud$lte(20)
# Compute NDVI using inbuilt function
ndvi <- image$normalizedDifference(c('B5', 'B4'))$rename('NDVI')
# Return the masked image with an NDVI band.
image$addBands(ndvi)$updateMask(mask)
}
cloudlessNDVI = temporalFiltered$map(ndvilowcloud)
medianimage <- cloudlessNDVI$median()$select('NDVI')
medNDVIaoi <- medianimage$clip(aoi)
Map$centerObject(aoi)
Map$addLayer(
eeObject=medNDVIaoi,
visParam=list(min=-1, max=1, palette=c('blue', 'white', 'green')),
name="Median NDVI"
)
med_ndvi <- ee_as_raster(
image = medNDVIaoi,
region = aoi,
scale = 30,
via = 'drive'
)
writeRaster(med_ndvi,
"./data/NDVIgee",
format = "GTiff",
overwrite=TRUE)
## define bounding box
aoi_bbox = c(bbxmin, bbymin, bbxmax, bbymax)
## obtain road data
q <- opq(bbox = aoi_bbox) %>%
add_osm_feature(key = 'highway') %>%
osmdata_sf()
# Temporarily read in NDVIexample from folder, which has been directly downloaded from GEE.
# We could replace this with med_ndvi if rgee continues to be reliable.
ndvipath <- "./data/NDVIexample.tif"
ndvi <- raster(ndvipath)
# Reclassify so that <0.35 = impassable, 0.35-0.6 = 3.5km/h, 0.6-0.7 = 2.48km/h and > 0.7 = 1.49km/h
ndviwalk_kph <- c(0.1, 3.5,  2.48, 1.49)
# Convert to m/s
ndviwalk_mps <- ndviwalk_kph/3.6
# Convert to crossing time in seconds, assuming travel along hypotenuse and pixel size is 30m
ndviwalk_secs <- 42.43/ndviwalk_mps
# Convert km/h to m/s
ndviwalk_vec <- c(-1, 0.35, ndviwalk_secs[1], 0.35, 0.6, ndviwalk_secs[2], 0.6, 0.7, ndviwalk_secs[3], 0.7, 1, ndviwalk_secs[4])
ndviwalk_mat <- matrix(ndviwalk_vec, ncol = 3, byrow = TRUE)
ndvi_assigned <- ndvi
ndvi_assigned <- reclassify(ndvi_assigned, ndviwalk_mat)
# Primary = 80kph, secondary = 80kph, 'Other' road speed = 20 kph
road_vector <- c("primary", "secondary", "motorway", "trunk")
q$osm_lines$motorspeedkph <- ifelse(q$osm_lines$highway %in% road_vector, 80, 20)
q$osm_lines$motorspeedmps <- q$osm_lines$motorspeedkph/3.6
# Assume a 30m resolution cell
q$osm_lines$time_secs <- 42.43/q$osm_lines$motorspeedmps
# Convert to raster, matching up with the NDVI raster resolution and extent
# Note that the fasterize function only works with polygons, so adding a buffer to the roads of ~30m
roads.poly <- st_buffer(q$osm_line, 0.00015)
osm_road_raster <- fasterize(roads.poly, ndvi_assigned, "time_secs", fun = 'min')
## merge the NDVI and the OSM, retain the minimum value (this is the quickest cell crossing time)
friction_surface_motor <- mosaic(osm_road_raster, ndvi_assigned, fun = min, tolerance = 1)
writeRaster(friction_surface_motor,
"./outputs/friction_raster_motor",
format = "GTiff", overwrite=TRUE)
healthfac <- st_read("./data/healthfacexample.shp")
# First calculate the transition matrix
# Check the transitionFunction
trans_motor <- transition(friction_surface_motor, transitionFunction = function(x){1/mean(x)}, directions = 8)
# Then calculate the cumulative cost
leastcost_motor <-  accCost(trans_motor, as_Spatial(healthfac))
writeRaster(leastcost_motor,
"./outputs/leastcost_raster_motor",
format = "GTiff", overwrite=TRUE)
## warning for removing NA pixels is masked
lcm_df <- as.data.frame(leastcost_motor, xy = TRUE)
lcm_df$mins <- lcm_df$layer/60
lcm_df$layer = NULL
# Create raster
lcm_raster <- rasterFromXYZ(lcm_df)
plot(lcm_raster)
# Create matrix
rcl_matrix <- c(0, 30, 1, # 30 minutes
30, 60, 2, # 1 hour
60, 180, 3, # 3 hours
180, 360, 4, # 6 hours
360, 720, 5, # 12 hours
720, 100000, 6 # 12+ hours
)
rcl_matrix <- matrix(rcl_matrix, ncol=3, byrow=TRUE)
# Reclassify 'lcm_raster' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(lcm_raster, rcl_matrix, include.lowest=TRUE)
# Check as data.frame
lcm_rcl_pop_data_df <- as.data.frame(lcm_pop_data_rcl, xy = TRUE)
##### Option_1: 'FKR' package: Bad; requires subsetting dataframe and cannot save as polygon .shp
# install.packages("FRK")
library(FRK)
# Create spatialpolygon(s) from 'lcm_rcl_pop_data_df'
lcm_rcl_pop_data_polygons <- df_to_SpatialPolygons(lcm_rcl_pop_data_df, "mins", c("x","y"), CRS())
plot(lcm_rcl_pop_data_polygons)
lcm_rcl_pop_data_polygons
library(stars)
# Convert 'lcm_pop_data_rcl' from rasterlayer to 'stars' object
lcm_pop_data_rcl_stars <- st_as_stars(lcm_pop_data_rcl)
lcm_pop_data_rcl_stars
plot(lcm_pop_data_rcl_stars)
##### convert stars object to sf using: https://r-spatial.github.io/stars/reference/st_as_sf.html ???
lcm_pop_data_rcl_stars_test <- st_as_sf(lcm_pop_data_rcl_stars,
as_points = FALSE,
merge = TRUE)
plot(lcm_pop_data_rcl_stars_test)
# Check
# plot(lcm_pop_data_rcl_stars_test)
lcm_pop_data_rcl_stars_test
# Save as polygon
st_write(lcm_pop_data_rcl_stars_test,
dsn = "time_boundary_polygon",
layer = "time_boundary_polygon",
driver = "ESRI Shapefile",
overwrite  = TRUE)
## Submit to WorldPop
# load package
library(wpCPR)
wpCPRPopulation (year=2020,
shapeFilePath = "./time_boundary_polygon/time_boundary_polygon.shp",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
# Aggregate ??? *cannot get to work*
lcm_pop_data_rcl_stars_test_agg  <- aggregate(lcm_pop_data_rcl_stars_test)
plot(lcm_pop_data_rcl_stars_test)
# dissolve using 'rmapshaper' package ??? *cannot get to work*
install.packages("rmapshaper")
library(rmapshaper)
# Dissolve using 'ms_dissolve'
lcm_pop_data_rcl_stars_test_dissolve <- ms_dissolve(lcm_pop_data_rcl_stars_test)
lcm_pop_data_rcl_stars_test
# Save as polygon
st_write(lcm_pop_data_rcl_stars_test,
dsn = "time_boundary_polygon",
layer = "time_boundary_polygon",
driver = "ESRI Shapefile",
overwrite  = TRUE)
wpCPRPopulation (year=2020,
shapeFilePath = "./time_boundary_polygon/time_boundary_polygon.shp",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
plot(lcm_pop_data_rcl_stars_test)
lcm_pop_data_rcl_stars_test
lcm_pop_data_rcl_stars_test_dissolve
# Save as polygon
st_write(lcm_pop_data_rcl_stars_test_dissolve,
dsn = "time_boundary_polygon",
layer = "time_boundary_polygon",
driver = "ESRI Shapefile",
overwrite  = TRUE)
wpCPRPopulation (year=2020,
shapeFilePath = "./time_boundary_polygon/time_boundary_polygon.shp",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
lcm_pop_data_rcl_stars_test_dissolve
plot(lcm_pop_data_rcl_stars_test_dissolve)
# Save as polygon
st_write(lcm_pop_data_rcl_stars_test_dissolve,
dsn = "time_boundary_polygon",
layer = "time_boundary_polygon",
driver = "ESRI Shapefile",
overwrite  = TRUE)
# Save as polygon
st_write(lcm_pop_data_rcl_stars_test_dissolve,
dsn = "time_boundary_polygon",
layer = "time_boundary_polygon",
driver = "ESRI Shapefile",
overwrite  = TRUE)
wpCPRPopulation (year=2020,
shapeFilePath = "./time_boundary_polygon/time_boundary_polygon.shp",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
lcm_pop_data_rcl_stars_test_dissolve
plot(lcm_pop_data_rcl_stars_test)
lcm_pop_data_rcl_stars_test_dissolve
lcm_pop_data_rcl_stars_test_dissolve
plot(lcm_pop_data_rcl_stars_test)
indFn("ee_initialize")
FindFn("ee_initialize")
findFn("ee_initialize")
install.packages("sos")
library(sos)
findFn("str_replace")
install.packages("sos")
library(sos)
findFn(ee_Initialize())
# 0.0008333333 0.0008333333
area(pop_data)
pop_data
# 'wpgpGetCountryDataset' function will download a raster dataset based on ISO and covariate name
wpgpGetCountryDataset(ISO3 = ISO3,
covariate = "ppp_2020",
destDir = "./WorldPop")
# load package
library(wpgpDownloadR)
## Download ISO3 dataframe to obtain ISO3 info
# 'wpgpListCountries' function will return a dataframe with all ISO3 available on WorldPop ftp server.
ISO3_df <- wpgpListCountries()
## Download ISO3 dataframe to obtain ISO3 info
# 'wpgpListCountries' function will return a dataframe with all ISO3 available on WorldPop ftp server.
ISO3_df <- wpgpListCountries()
# Set country of interest (move to beginning of script within initial setup phase?)
COI <- "Malawi"
# Ascertain ISO3 of Malawi
ISO3 <- ISO3_df[ISO3_df$Country == COI, "ISO3"]
ISO3
# 'wpgpListCountryDatasets' function will return a dataframe of available covariates to download from WorldPop FTP for a country.
# This function could be used to query the name of the dataset which then could be downloaded for a country.
covariates <- wpgpListCountryDatasets(ISO3 = ISO3)
# 'wpgpGetCountryDataset' function will download a raster dataset based on ISO and covariate name
wpgpGetCountryDataset(ISO3 = ISO3,
covariate = "ppp_2020",
destDir = "./WorldPop")
## .tif file is ~50 MB
# Read in .tif file
pop_data <- "./WorldPop/mwi_ppp_2020.tif"
pop_data <- raster(pop_data)
res(pop_data)
# 0.0008333333 0.0008333333
area(pop_data)
res_pop_data <- res(pop_data)
prod(res_pop_data)
View(lcm_rcl_pop_data_df)
## Make a new layer which is the whole raster, then reclassify to keep group 1
group_1 <- lcm_pop_data_rcl
lcm_pop_data_rcl
View(lcm_rcl_pop_data_df)
## Make other categories NA
group_1 <- reclassify(group_1, c(1,6,NA))
## make this a stars object
group_1_stars <- st_as_stars(group_1)
plot(group_1_stars)
group_1_poly <- st_make_valid(group_1_poly)
## Transform to polygon and simplify geometry
group_1_poly <- st_as_sf(group_1_stars, merge = TRUE, long = FALSE)
group_1_poly <- st_make_valid(group_1_poly)
group_1_poly <- st_make_valid(group_1_poly)
group_1_poly_c <- st_combine(group_1_poly)
group_1_poly_s <- ms_simplify(group_1_poly_c, explode = TRUE)
group_1_poly_combine <- st_combine(group_1_poly)
group_1_poly_simp <- ms_simplify(group_1_poly_combine, explode = TRUE)
plot(group_1_stars)
plot(group_1_poly_simp)
plot(group_1_stars)
plot(group_1_poly_simp)
# Dissolve
group_1_poly_simp_diss <- ms_dissolve(group_1_poly_simp)
plot()
plot(group_1_poly_simp_diss)
## cast back to polygon
group_1_poly_simp_diss_poly <- st_cast(group_1_poly_simp_diss, "POLYGON")
plot(group_1_poly_simp_diss_poly)
## cast back to polygon
group_1_poly_simp_poly <- st_cast(group_1_poly_simp, "POLYGON")
# Dissolve 'group_1_poly_simp', then transform back to polygon
group_1_poly_simp_dis <- ms_dissolve(group_1_poly_simp)
group_1_poly_simp_dis_poly <- st_cast(group_1_poly_simp_dis, "POLYGON")
# Divide WorldPop raster resolution by 'leastcost_motor' resolution to give multiplication factor
res(pop_data)
# 0.0008333333 0.0008333333
res(leastcost_motor)
# 0.0008333333 0.0008333333
pop_data_res <- res(pop_data)
# 0.0002694946 0.0002694946
lcm_res <- res(leastcost_motor)
# Division
pop_data_res / lcm_res
# Division
multiplication_factor <- pop_data_res / lcm_res
multiplication_factor
## Aggregate 'leastcost_motor' to same resolution as WorldPop raster
agg_test <- aggregate(leastcost_motor, fact = multiplication_factor)
res(agg_test)
plot(agg_test)
## Make a new layer which is the whole raster, then reclassify to keep group 1
group_1 <- agg_test
# Make other categories NA
group_1 <- reclassify(group_1, c(1,6,NA))
# make this a stars object
group_1_stars <- st_as_stars(group_1)
plot(group_1_stars)
## Make a new layer which is the whole raster, then reclassify to keep group 1
group_1 <- lcm_pop_data_rcl
# Make other categories NA
group_1 <- reclassify(group_1, c(1,6,NA))
# make this a stars object
group_1_stars <- st_as_stars(group_1)
plot(group_1_stars)
# Reclassify 'agg_test' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(lcm_raster, rcl_matrix, include.lowest=TRUE)
# Reclassify 'agg_test' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(agg_test, rcl_matrix, include.lowest=TRUE)
plot(lcm_pop_data_rcl
)
plot(lcm_pop_data_rcl)
View(rcl_matrix)
View(agg_test)
# Reclassify 'agg_test' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(agg_test, rcl_matrix, include.lowest=TRUE)
plot(lcm_pop_data_rcl)
plot(agg_test)
View(rcl_matrix)
View(as_data_frame(agg_test))
# Reclassify 'agg_test' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(agg_test, rcl_matrix, include.lowest=TRUE)
plot(lcm_pop_data_rcl)
agg_test_df <- as_data_frame(agg_test)
View(agg_test)
# Check as data.frame
agg_test_df <- as.data.frame(agg_test, xy = TRUE)
View(agg_test_df)
View(leastcost_motor)
View(as_data_frame(leastcost_motor, xy = TRUE))
## Aggregate 'leastcost_motor' to same resolution as WorldPop raster
# Check 'leastcost_motor' as dataframe
lcm_df <- as_data_frame(leastcost_motor, xy = TRUE)
## Aggregate 'leastcost_motor' to same resolution as WorldPop raster
# Check 'leastcost_motor' as dataframe
lcm_df <- as.data.frame(leastcost_motor, xy = TRUE)
# Check as data.frame
agg_test_df <- as.data.frame(agg_test, xy = TRUE)
View(agg_test_df)
## Aggregate 'leastcost_motor' to same resolution as WorldPop raster
# Check 'leastcost_motor' as dataframe
lcm_df <- as.data.frame(leastcost_motor, xy = TRUE)
View(lcm_df)
# First calculate the transition matrix
# Check the transitionFunction
trans_motor <- transition(friction_surface_motor, transitionFunction = function(x){1/mean(x)}, directions = 8)
# Then calculate the cumulative cost
leastcost_motor <-  accCost(trans_motor, as_Spatial(healthfac))
## warning for removing NA pixels is masked
lcm_df <- as.data.frame(leastcost_motor, xy = TRUE)
lcm_df$mins <- lcm_df$layer/60
View(lcm_df)
lcm_df$layer = NULL
View(lcm_df)
# Create raster
lcm_raster <- rasterFromXYZ(lcm_df)
plot(lcm_raster)
# Create matrix
rcl_matrix <- c(0, 30, 1, # 30 minutes
30, 60, 2, # 1 hour
60, 180, 3, # 3 hours
180, 360, 4, # 6 hours
360, 720, 5, # 12 hours
720, 100000, 6 # 12+ hours
)
rcl_matrix <- matrix(rcl_matrix, ncol=3, byrow=TRUE)
# Divide WorldPop raster resolution by 'leastcost_motor' resolution to give multiplication factor
res(pop_data)
res(lcm_raster)
# 0.0002694946 0.0002694946
lcm_res <- res(lcm_raster)
# Division
multiplication_factor <- pop_data_res / lcm_res
multiplication_factor
## Aggregate 'lcm_raster' to same resolution as WorldPop raster
# Check 'lcm_raster' as dataframe
View(lcm_raster)
## Aggregate 'lcm_raster' to same resolution as WorldPop raster
agg_test <- aggregate(lcm_raster, fact = multiplication_factor)
# Check
plot(agg_test)
res(agg_test)
# Check as data.frame
agg_test_df <- as.data.frame(agg_test, xy = TRUE)
View(agg_test_df)
# Create matrix
rcl_matrix <- c(0, 30, 1, # 30 minutes
30, 60, 2, # 1 hour
60, 180, 3, # 3 hours
180, 360, 4, # 6 hours
360, 720, 5, # 12 hours
720, 100000, 6 # 12+ hours
)
rcl_matrix <- matrix(rcl_matrix, ncol=3, byrow=TRUE)
# Reclassify 'agg_test' with 'rcl_matrix'
lcm_pop_data_rcl <- reclassify(agg_test, rcl_matrix, include.lowest=TRUE)
lcm_pop_data_rcl
# Reclassify 'agg_test' with 'rcl_matrix'
agg_test_reclass <- reclassify(agg_test, rcl_matrix, include.lowest=TRUE)
plot(agg_test_reclass)
## Make a new layer which is the whole raster, then reclassify to keep group 1
group_1 <- agg_test_reclass
# Make other categories NA
group_1 <- reclassify(group_1, c(1,6,NA))
# make this a stars object
group_1_stars <- st_as_stars(group_1)
group_1_stars
plot(group_1_stars)
# Transform to polygon
group_1_poly <- st_as_sf(group_1_stars, merge = TRUE, long = FALSE)
group_1_poly <- st_make_valid(group_1_poly)
group_1_poly_combine <- st_combine(group_1_poly)
# Simplify geometry
group_1_poly_simp <- ms_simplify(group_1_poly_combine, explode = TRUE)
# cast back to polygon
group_1_poly_simp_poly <- st_cast(group_1_poly_simp, "POLYGON")
# Dissolve 'group_1_poly_simp', then transform back to polygon
group_1_poly_simp_dis <- ms_dissolve(group_1_poly_simp)
group_1_poly_simp_dis_poly <- st_cast(group_1_poly_simp_dis, "POLYGON")
plot(group_1_poly_simp_dis_poly)
plot(group_1_poly_simp_poly)
plot(group_1_poly_simp_poly)
group_1_poly_simp_poly
group_1_poly_simp_dis_poly
# Save both as polygons
st_write(group_1_poly_simp_poly,
dsn = "group_1_poly_simp_poly",
layer = "group_1_poly_simp_poly",
driver = "ESRI Shapefile",
overwrite  = TRUE)
st_write(group_1_poly_simp_dis_poly,
dsn = "group_1_poly_simp_dis_poly",
layer = "group_1_poly_simp_dis_poly",
driver = "ESRI Shapefile",
overwrite  = TRUE)
wpCPRPopulation (year=2020,
shapeFilePath = "./group_1_poly_simp_poly/group_1_poly_simp_poly",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
setwd("~/Documents/GitHub/accessibility")
wpCPRPopulation (year=2020,
shapeFilePath = "./group_1_poly_simp_poly/group_1_poly_simp_poly",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
wpCPRPopulation (year=2020,
shapeFilePath = "./group_1_poly_simp_poly/group_1_poly_simp_poly.shp",
outputFilePath = NULL,
apikey = NULL,
callbacktime = 5,
maxexectime = 3600,
apiurl = NULL,
verbose = TRUE)
group_1_poly_simp_poly
# Install 'wopr'
devtools::install_github('wpgp/wopr')
library(wopr)
library(wopr)
library(wopr)
library(wpgp/wopr)
library(wopr)
# Install 'wopr'
devtools::install_github("wpgp/wopr")
# Install 'wopr'
devtools::install_github("wpgp/wopr")
library(wopr)
# Install 'wopr'
devtools::install_github('wpgp/wopr', upgrade='ask')
install.packages(c("aweek", "backports", "boot", "broom", "class", "codetools", "cowplot", "data.table", "dbplyr", "dplyr", "epiR", "forcats", "foreign", "gert", "ggthemes", "incidence", "insight", "KernSmooth", "knitr", "MASS", "Matrix", "matrixStats", "mgcv", "nlme", "nnet", "pbkrtest", "quantreg", "RcppEigen", "rgdal", "rmarkdown", "spatial", "survival", "systemfonts", "tinytex", "tmap", "tmaptools"))
# Install 'wopr'
devtools::install_github('wpgp/wopr', upgrade='ask')
# Install 'wopr'
devtools::install_github('wpgp/wopr')
remove.packages('wpgp/wopr')
# Install 'wopr'
devtools::install_github('wpgp/wopr')
